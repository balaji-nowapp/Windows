using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pidilite
{
    public static class StoreProcedure
    {

        public static string[] spArray = { "ALTER TABLE tb_users ADD user_photo varbinary(max) null", "ALTER TABLE tb_users ADD WPassword nvarchar(max) null\n ALTER TABLE tb_module ADD sql_Select nvarchar(max) null", "ALTER TABLE tb_module ADD sql_Where nvarchar(max) null\n ALTER TABLE tb_module ADD sql_Group nvarchar(max) null", "ALTER TABLE tb_module ADD module_Form nvarchar(max) null\n ALTER TABLE tb_module ADD module_Grid nvarchar(max) null", "CREATE TYPE [dbo].[udt_InsertDetailForm] AS TABLE(\n	[Fieldname] [nvarchar](max) NULL,\n	[Value] [nvarchar](max) NULL,\n	[Index] [smallint] NULL\n)\nCREATE TYPE [dbo].[udt_InsertForm] AS TABLE(\n	[Fieldname] [nvarchar](max) NULL,\n	[Value] [nvarchar](max) NULL\n)\n",   "Create   VIEW [dbo].[hsn_tax]  AS  (select mat.nxt_material_id AS nxt_material_id,mat.nxt_material_name AS nxt_material_name,mat.nxt_material_code AS nxt_material_code,mat.nxt_material_shortname AS nxt_material_shortname,mat.nxt_material_description AS nxt_material_description,mat.nxt_material_category AS nxt_material_category,mat.nxt_material_upc AS nxt_material_upc,mat.nxt_material_mpn AS nxt_material_mpn,mat.nxt_material_ean AS nxt_material_ean,mat.nxt_material_isbn AS nxt_material_isbn,mat.nxt_primary_uom AS nxt_primary_uom,mat.nxt_material_img AS nxt_material_img,mat.nxt_enable_batches AS nxt_enable_batches,mat.nxt_mfg_date AS nxt_mfg_date,mat.nxt_expiry_date AS nxt_expiry_date,mat.nxt_enable_serial_nos AS nxt_enable_serial_nos,mat.nxt_valuation_method AS nxt_valuation_method,mat.nxt_hsn_code AS nxt_hsn_code,mat.nxt_material_group AS nxt_material_group,mat.nxt_purchase_ledger_name AS nxt_purchase_ledger_name,mat.nxt_sales_ledger_name AS nxt_sales_ledger_name,mat.nxt_hsn_desc AS nxt_hsn_desc,mat.created_by AS created_by,mat.owned_by AS owned_by,mat.created_on AS created_on,mat.updated_on AS updated_on,mat.nxt_short_code AS nxt_short_code,tax.nxt_tax_detail_id AS nxt_tax_detail_id,tax.nxt_tax_detail_id_link AS nxt_tax_detail_id_link,tax.nxt_detail_tax_type AS nxt_detail_tax_type,tax.nxt_eff_date AS nxt_eff_date,tax.nxt_tax_igst_per AS nxt_tax_igst_per,tax.nxt_tax_cgst_per AS nxt_tax_cgst_per,tax.nxt_tax_sgst_per AS nxt_tax_sgst_per,tax.nxt_state AS nxt_state from (nxt_material mat join nxt_tax_detail tax on((tax.nxt_tax_detail_id_link = mat.nxt_hsn_code))))",   "Create    VIEW [dbo].[bin_wise_stock_view]  AS  (select nxt_bin_wise_stock_history.stock_hist_prod AS prod_id,nxt_bin_wise_stock_history.stock_hist_bin AS bin_id,sum(cast (Isnull(nxt_bin_wise_stock_history.stock_hist_qty,0) as bigint )) AS stock_qty from nxt_bin_wise_stock_history group by nxt_bin_wise_stock_history.stock_hist_bin,nxt_bin_wise_stock_history.stock_hist_prod)",   "Create   VIEW [dbo].[so_history_view]  AS  (select sh.so_history_so_id AS so_his_id,sum(cast (isnull(sh.so_history_qty,0) as bigint)) AS so_his_qty from nxt_salesorder_histrory sh group by sh.so_history_so_id) ;\n ",   "Create   VIEW [dbo].[org_user_view]  AS  (select tb_org_users.org_users_id AS id,tb_org_users.org_users_user_id AS user_id,tb_org_users.org_users_org_id AS orgs_id,tb_org.org_name AS org_name,tb_org_users.org_users_default AS defaultV,tb_org_users.org_users_active AS active from (tb_org_users join tb_org on((tb_org.org_id = tb_org_users.org_users_org_id))) where (tb_org_users.org_users_status = 'Yes') )\n \n ",  "Create  VIEW [dbo].[bill_ship_addr] AS (select nxt_ship_bill_to.nxt_ship_bill_to_id AS id,nxt_ship_bill_to.nxt_ledger_link_id AS sbid,nxt_ship_bill_to.nxt_ship_bill_to AS ship_bill_to,nxt_ship_bill_to.nxt_address AS addr,nxt_ship_bill_to.nxt_state AS state_id,nxt_state.nxt_state_name AS state_name,nxt_ship_bill_to.nxt_city AS city,nxt_ship_bill_to.nxt_zip AS zip,c.nxt_country_id AS country_id,c.nxt_country_name AS country_name from ((nxt_ship_bill_to join nxt_country c on((nxt_ship_bill_to.nxt_country = c.nxt_country_id))) join nxt_state on((nxt_state.nxt_state_id = nxt_ship_bill_to.nxt_state))))",  "Create  VIEW [dbo].[sales_order_pending]  AS  (select a.nxt_sales_order_id AS nxt_sales_order_id,a.nxt_sales_order_number AS nxt_sales_order_number,a.nxt_sales_order_date AS nxt_sales_order_date,a.nxt_so_ref_no AS nxt_so_ref_no,a.nxt_so_ref_date AS nxt_so_ref_date,a.org_id AS org_id,a.nxt_party_name AS nxt_party_name,a.nxt_bill_to AS nxt_bill_to,a.nxt_bill_address AS nxt_bill_address,a.nxt_bill_country AS nxt_bill_country,a.nxt_bill_state AS nxt_bill_state,a.nxt_bill_city AS nxt_bill_city,a.nxt_bill_pin AS nxt_bill_pin,a.nxt_ship_to AS nxt_ship_to,a.nxt_ship_address AS nxt_ship_address,a.nxt_ship_country AS nxt_ship_country,a.nxt_ship_state AS nxt_ship_state,a.nxt_ship_city AS nxt_ship_city,a.nxt_ship_pin AS nxt_ship_pin,a.nxt_party_contact_name AS nxt_party_contact_name,a.nxt_party_email AS nxt_party_email,a.nxt_sales_order_remarks AS nxt_sales_order_remarks,a.nxt_sales_sub_total AS nxt_sales_sub_total,a.nxt_sales_disc AS nxt_sales_disc,a.nxt_sales_gtotal AS nxt_sales_gtotal,a.nxt_sales_cgst AS nxt_sales_cgst,a.nxt_sales_sgst AS nxt_sales_sgst,a.nxt_sales_igst AS nxt_sales_igst,a.created_by AS created_by,a.owned_by AS owned_by,a.nxt_state_gst_from AS nxt_state_gst_from,a.nxt_state_gst_to AS nxt_state_gst_to,a.created_on AS created_on,a.updated_on AS updated_on,a.nxt_warehouse AS nxt_warehouse,a.nxt_sales_order_status AS nxt_sales_order_status,b.nxt_sales_order_detail_id AS so_pid,b.nxt_sales_order_id AS so_id,b.nxt_material_name AS nxt_material_name,b.nxt_hsn_code AS nxt_hsn_code,b.nxt_sales_order_qty AS nxt_sales_order_qty,c.so_his_qty AS so_his_qty,(b.nxt_sales_order_qty - c.so_his_qty) AS pendingQty,b.nxt_sales_order_uom AS nxt_sales_order_uom,b.nxt_sales_order_rate AS nxt_sales_order_rate,b.nxt_sales_order_discount_per AS nxt_sales_order_discount_per,b.nxt_sales_order_discount_value AS nxt_sales_order_discount_value,b.nxt_sales_order_amount AS nxt_sales_order_amount,b.nxt_cmn_igst AS nxt_cmn_igst,b.nxt_cmn_igst_amt AS nxt_cmn_igst_amt,b.nxt_cmn_cgst AS nxt_cmn_cgst,b.nxt_cmn_cgst_amt AS nxt_cmn_cgst_amt,b.nxt_cmn_sgst AS nxt_cmn_sgst,b.nxt_cmn_sgst_amt AS nxt_cmn_sgst_amt from ((nxt_sales_order a join nxt_sales_order_detail b on((a.nxt_sales_order_id = b.nxt_sales_order_id))) left join so_history_view c on((c.so_his_id = b.nxt_sales_order_detail_id))) where ((b.nxt_sales_order_line_status = 'Not Billed') and (a.nxt_sales_order_status = 'Not Billed') and ((b.nxt_sales_order_qty - isnull(c.so_his_qty,0)) > 0))) ;\n \n ",   "Create   VIEW [dbo].[bin_name_wise_stock_view]  AS  (select Cast (nxt_bin.nxt_bin_identifier as nvarchar ) +' ('+ Cast (bin_wise_stock_view.stock_qty as  nvarchar )+') ' AS nxt_bin_identifier,nxt_bin.nxt_warehouse AS nxt_warehouse,bin_wise_stock_view.prod_id AS prod_id,bin_wise_stock_view.bin_id AS bin_id,bin_wise_stock_view.stock_qty AS stock_qty from (bin_wise_stock_view join nxt_bin on((bin_wise_stock_view.bin_id = nxt_bin.nxt_bin_id)))) ;\n ",  "Create  function [dbo].[ufn_GetPrimaryKey]\n (\n @TableName nvarchar(max)\n )\n Returns  nvarchar(max)\n as\n begin\n Declare @primaryKey nvarchar(max)\n set @primaryKey = (Select column_name as column_Name\n FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC\n INNER JOIN\n     INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU\n ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND\n  TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND \n  KU.table_name=@TableName)\n  Return @primaryKey\nend\n \n ",  "Create  function [dbo].[ufn_GetpreviousIdofTable]\n (\n @primaryKey nvarchar(max),\n @TableName nvarchar(max)\n )\n Returns bigint\n as\n begin\n DECLARE @sqlCommand nvarchar(max)\n declare @id int\n --declare @primaryKey nvarchar(max)\n --set @primaryKey = (Select dbo.ufn_GetPrimaryKey (@TableName))\n SET @sqlCommand = 'SELECT TOP 1 '+@primaryKey +' FROM '+@TableName+' with (nolock) order by '+ @primaryKey+' desc '\n \n EXECUTE sp_executesql @sqlCommand, N'@id int OUTPUT', @id =@id  OUTPUT\n return  @id \n \n \n end\n ",  "Create  function[dbo].[ufn_GetParentIdsofMenu] \n  ()   returns nvarchar(max) \n   as \n  begin \n  Declare @Return nvarchar(max) \n  set @Return =  (Select Distinct Stuff( (Select ',' + cast(menu_id as nvarchar(max)) From tb_menu q1 where q1.parent_id = 0 and q1.position = 'sidebar' Order By  q1.ordering asc  For XML Path(''),Type).value('text()[1]','varchar(max)'),1,1,'')) \n  return  @Return \n   end\n   \n ",  "Create  function [dbo].[ufn_GetownedbyId] \n (\n @UserId bigint\n )\n  returns bigint\n  as\n  begin\n  Declare @ownedby bigint\n  set @ownedby =(Select owned_by from tb_users with(nolock)where id = @UserId  )\n  Return @ownedby\n  end\n  \n ",  "Create  FUNCTION [dbo].[ufn_GetUserOrg] (@Userid bigint)\n RETURNS @OrgDetails TABLE (\n    OrgId  int NOT NULL,\n    OrgName nvarchar(max) NOT NULL,\n    Defaultvalue nvarchar(10) NOT NULL\n ) \n AS\n BEGIN\n \n    INSERT INTO @OrgDetails (OrgId, OrgName, Defaultvalue)\n    select orgs_id ,org_name , defaultV  from org_user_view where user_id = @Userid \n  \n    RETURN\n END\n ",  "Create  procedure [dbo].[usp_DeleteDatafromGrid] \n (\n @RID nvarchar(max),\n @TableName nvarchar(max),\n @PrimaryKey nvarchar(max)\n \n )\n as\n begin\n \n Declare @Query nvarchar(max)\n set @Query = 'Delete '+@TableName+' where '+@PrimaryKey + ' in ('+ @RID+')';\n EXECUTE sp_executesql @Query\n end\n  ",  "Create  procedure[dbo].[usp_GetMenubyParent] \n  ( @parentId smallint ) \n  as \n  begin \n   if exists(Select* from tb_menu with(nolock) where parent_id = @parentId ) \n           begin \n  --if (@parentId =0) \n  --begin \n  select menu_id as id, menu_name as name, menu_icons as logoClass, menu_icons_code as logo, menu_bg_color as backgroundColor, parent_id as parentId, module as moduleName, menu_module_id as moduleId, position as position, ordering as ordering from tb_menu with (nolock) where parent_id = @ParentId and position ='sidebar' order by ordering asc \n  -- end \n  --else \n   --begin \n  --    select menu_id as id, menu_name as name, menu_icons as logoClass, menu_icons_code as logo, menu_bg_color as backgroundColor, parent_id as parentId, module as moduleName, menu_module_id as moduleId, position as position, ordering as ordering from tb_menu with(nolock) where menu_id = @ParentId and position ='sidebar' \n   -- end \n   end \n  end\n  \n  ", "Create  Procedure[dbo].[usp_GetModuleDetailsByID]\n  ( \n  @IsForm bit, \n  @ModuleId int ) as \n  begin \n  if ( \n  @IsForm = 1) \n  begin \n  Select module_title as Title, module_Form as Form , '' as Grid , module_db as TableName, module_db_key as PrimaryKey,sql_Where as whereCond,trans_type as TransType, module_type as ModuleType,ISNull(Cast (SUBSTRING(sql_Select , CHARINDEX('From', sql_Select), LEN(sql_Select)) as nvarchar(max)),'') as SQLSelect,sql_Group as SQLGroup from tb_module with(nolock) where module_id = @ModuleId \n  end \n  else \n  begin \n  Select module_title as Title, '' as Form, module_Grid as Grid, module_db as TableName,  module_db_key as PrimaryKey,sql_Where as whereCond,trans_type as TransType, module_type as ModuleType,ISNull(Cast (SUBSTRING(sql_Select , CHARINDEX('From', sql_Select), LEN(sql_Select)) as nvarchar(max)),'') as SQLSelect,sql_Group as SQLGroup  from tb_module with(nolock) where module_id =  @ModuleId \n  end \n  end\n \n ",  "Create  procedure[dbo].[usp_GetValuesforDropDown]  \n ( \n  @TableName nvarchar(100), \n  @Key nvarchar(100), \n  @Value nvarchar(100),\n  @Condition nvarchar(max)) \n  as \n  begin \n  Declare  \n  @Qry nvarchar(max) \n  set  \n  @Qry = 'Select ' +  \n  @Key + ' as Id ,' +  \n  @Value + ' as Value from ' + \n  \n  @TableName + ' with(nolock)'\n  if (@Condition <> '')\n  begin\n set @Qry = @Qry+' where '+@Condition\n  end\n  EXECUTE sp_executesql @Qry \n  end\n ", "\n\nCreate procedure [dbo].[usp_InsertDetailFormData]\n(\n@MainFormId bigint,\n@MainTable  nvarchar(max),\n@MainTablePK nvarchar(max),\n@userId bigint,\n@UDTT udt_InsertDetailForm readonly,\n@tableName nvarchar(max),\n@primaryKey nvarchar(max),\n@opCode bigint output\n)\nas\nbegin\n Declare @Field nvarchar(max),@Value nvarchar(max),@Qry nvarchar(max),@id smallint,@GN nvarchar(10)= NULL \nif (@MainFormId<>0)\n begin--2\nset @Qry = 'Delete  from '+@tableName+' where '+@MainTablePK+' = '+ Cast(@MainFormId  as nvarchar)\n--print @Qry\nexec  sp_executesql @Qry;\nset @Qry =''\n create table #tbltemp( FieldName nvarchar(max), Value nvarchar(max)); \n\nDECLARE cursorName CURSOR -- Declare cursor \n--LOCAL SCROLL STATIC \nFOR\n \nSelect Distinct [Index] from @UDTT\n \nOPEN cursorName -- open the cursor\n \nFETCH NEXT FROM cursorName INTO @id\nWHILE @@FETCH_STATUS = 0\n \nBEGIN\n\n   Insert into #tbltemp (FieldName,Value) (select Fieldname, Value from @UDTT where [Index]=@id and Fieldname <> @primaryKey )\n--select * from #tbltemp where Fieldname <> @primaryKey and Value IS NOT NULL\n       SELECT @Field = COALESCE(@Field+', ' ,' ') + Fieldname FROM #tbltemp where Fieldname <> @primaryKey and Value IS NOT NULL\n       SELECT @Value = COALESCE(@Value+', ' ,' ') +(Case Value When null Then '' Else ''''+Value+'''' End) FROM #tbltemp where Fieldname <> @primaryKey and Value IS NOT NULL\n truncate table #tbltemp\n    set @Qry =('Insert into '+@tableName+' ('+@MainTablePK+','+@Field +') values ('+ Cast(@MainFormId  as nvarchar)+','+@Value+')')\nexec  sp_executesql @Qry;\n--print @Field\n--print @Value\nprint @Qry\n truncate table #tbltemp\n set  @Qry = null\n set @Field=null\n set @Value =null\n FETCH NEXT FROM cursorName INTO @id\nEND\n \nCLOSE cursorName -- close the cursor\n \nDEALLOCATE cursorName -- Deallocate the cursor exec  sp_executesql @Qry\ndrop  table #tbltemp\nset @opCode = 1\n end--2\nend ",  "Create  procedure [dbo].[usp_GetpreviousIdofTable]\n (\n @primaryKey nvarchar(max),\n @TableName nvarchar(max)\n )\n \n as\n begin\n DECLARE @sqlCommand nvarchar(max)\n \n SET @sqlCommand = 'SELECT TOP 1 '+@primaryKey +' FROM '+@TableName+' with (nolock) order by '+ @primaryKey+' desc '\n EXECUTE sp_executesql @sqlCommand\n end\n ",   "Create   procedure[dbo].[usp_GetRecentAutonumber]  \n ( \n  @TableName nvarchar(100), \n  @Column nvarchar(100),\n  @TransTypeId smallint \n  ) \n  as \n  begin \n  Declare @Qry nvarchar(max) \n  \n  if (@TransTypeId = 0)\n  begin \n  set   @Qry = 'Select Isnull(t.' +  \n  @Column + ','''') as Id,t.CreatedDate  from ' +  \n '(SELECT\n         ROW_NUMBER() OVER ( order by ' +@Column+') AS RowNumber,'+@Column+',created_on as CreatedDate from  '+  @TableName+') t\n WHERE t.RowNumber = (Select COUNT(*) from '+@TableName+')'\n end\n else\n begin\n set   @Qry =''\n end\n  -- EXECUTE sp_executesql  \n  print @Qry \n  end\n  \n \n ",  "Create  procedure [dbo].[usp_GetUserDetail]\n ( \n  @UserId bigint \n  )\n  as \n  begin \n  select a.first_name as FirstName, a.last_name as LastName , a.user_photo as Photo from tb_users a with(nolock) where id=  @UserId \n  end\n  \n ",  "Create  procedure [dbo].[usp_UpdateDefaultOrg]\n (\n @OrgId bigint,\n @UserId bigint\n )\n as\n begin\n Update tb_org_users set  org_users_default  = 'No' where org_users_user_id = @UserId \n Update tb_org_users set org_users_default = 'Yes' where org_users_org_id = @OrgId \n end\n \n ",  "Create  Procedure[dbo].[usp_UpadteUserWPassword] \n ( \n  @UserName nvarchar(max), \n  @Password nvarchar(max), \n  @UserPhoto varbinary(max)) \n  as \n  begin \n  Update tb_users set WPassword = @Password, user_photo=@UserPhoto where email = @UserName \n  end\n  \n ",  "Create  procedure[dbo].[usp_LoginCheck] \n ( \n  @UserName varchar(max), \n  @Password varchar(max), \n  @OpCode bigint output \n  )  \n  as \n  begin \n  Declare @Action smallint  \n   if exists(select id from tb_users with(nolock) where email =@UserName ) \n  begin \n  if exists( select id from tb_users with(nolock) where email =@UserName and WPassword=@Password ) \n    begin  \n  set @OpCode = (select id from tb_users with(nolock) where email =@UserName and WPassword = @Password)-- Valid User   \n  set @Action = (select active from tb_users with(nolock) where email =@UserName and WPassword = @Password)\n  if (@Action =0)\n  begin \n  set @OpCode = -1 -- Inactive user   \n  end  else if  (@Action =2) \n  begin  \n   set @OpCode = -2 -- Blocked User \n  end    \n   end   \n  else  \n   set @OpCode = -4 -- No WPassword Saved   \n  end   \n  else   \n   begin \n   set @OpCode = -3-- Incorrect Credentials \n   end \n   end\n   \n ", "Create  procedure[dbo].[usp_InsertModuleDetails] \n( \n   \n  @ModuleId int,    \n  @ModuleName varchar(100),   \n  @ModuleTitle varchar(100), \n  @ModuleNote varchar(255), \n  @ModuleDB varchar(100), \n  @ModuleDBKey varchar(100), \n  @ModuleType varchar(max), \n  @ModuleDivision varchar(10), \n  @ModuleAccessServer varchar(max), \n  @ModuleForm nvarchar(max), \n  @ModuleGrid nvarchar(max), \n  @SqlSelect nvarchar(max), \n  @SqlWhere nvarchar(max), \n  @SqlGroup nvarchar(max), \n  @transType bigint,\n  @OpCode nvarchar(max) output)\n as \n\n  begin \n  SET IDENTITY_INSERT tb_module ON \n  if not exists(Select module_id from tb_module with(nolock) where module_id =  \n  @ModuleId) \n  begin \n  Insert into tb_module(module_id, module_name, module_title, module_note, module_author, module_db, module_db_key, module_type, module_division, module_access_server, module_Form, module_Grid, sql_Group, sql_Select, sql_Where, trans_type) values( \n  @ModuleId,  \n  @ModuleName,  \n  @ModuleTitle,  \n  @ModuleNote, 1,  \n  @ModuleDB,  \n  @ModuleDBKey,  \n  @ModuleType,   \n @ModuleDivision,  \n  @ModuleAccessServer,  \n  @ModuleForm,  \n  @ModuleGrid,  \n  @SqlGroup,  \n  @SqlSelect,  \n  @SqlWhere,\n  @transType)  \n  set @OpCode = 1  \n  end  \n  else \n   begin  \n   update tb_module set module_title = @ModuleTitle, module_note = @ModuleNote, module_author = 1, module_db = @ModuleDB, module_db_key = @ModuleDBKey, module_type = @ModuleType, module_division = @ModuleDivision, module_access_server = @ModuleAccessServer, module_Form = @ModuleForm, module_Grid = @ModuleGrid, sql_Group = @SqlGroup, sql_Select = @SqlSelect, sql_Where = @SqlWhere, trans_type = @transType  where module_id = @ModuleId \n  set @OpCode = 0 \n  end \n  SET IDENTITY_INSERT tb_module OFF \n  end",  "Create  Procedure[dbo].[usp_InsertMenu] \n  ( \n  @id int,\n  @name varchar(max),\n  @logoClass varchar(max),\n  @logo varchar(max),\n  @backgroundColor varchar(max),\n  @parentId int,\n  @moduleName varchar(max),\n  @moduleId int,\n  @position varchar(max),\n  @ordering int , \n  @OpCode smallint output ) \n  as \n  begin \n  SET IDENTITY_INSERT tb_menu ON \n  if not exists(Select menu_id from tb_menu with(nolock) where menu_id = @id) \n  begin \n  Insert into tb_menu (menu_id, menu_name, menu_icons, menu_icons_code, menu_bg_color, parent_id, module, menu_module_id, position, ordering, entry_by, owned_by, created_by ) \n   values (@id, @name, @logoClass, @logo, @backgroundColor, @parentId, @moduleName, @moduleId, @position, @ordering,0,0,0) \n   set @OpCode = 1 \n   end \n   else \n   begin \n   set @OpCode =-1 \n   end \n  SET IDENTITY_INSERT tb_menu OFF \n  end\n \n  \n ",  "Create  procedure [dbo].[usp_InsertFormData]\n (\n @Id bigint,\n @userId bigint,\n @primaryKey nvarchar(max),\n @UDTT udt_InsertForm readonly,\n @tableName nvarchar(max) \n )\n as\n  begin--1\n  Declare @Field nvarchar(max),@Value nvarchar(max),@Qry nvarchar(max),@updateQry nvarchar(max)\n  if (@Id =0)\n  begin--2 \n \n        SELECT @Field = COALESCE(@Field+', ' ,' ') + Fieldname FROM @UDTT where Fieldname <>'created_on'and Fieldname <> 'updated_on' and Fieldname <> 'updated_on' and    Fieldname <> 'owned_by' and  Fieldname <> 'created_by' and Fieldname  <>    @primaryKey\n \n      SELECT @Value = COALESCE(@Value+', ' ,' ') +(Case Value When null Then '' Else ''''+Value+'''' End) FROM @UDTT where Fieldname <>'created_on'and Fieldname <> 'updated_on'  and    Fieldname <> 'owned_by' and  Fieldname <> 'created_by' and  Fieldname <> @primaryKey\n \n     set @Qry =('Insert into '+@tableName+' (created_on,updated_on,created_by,owned_by,'+@Field +') OUTPUT  inserted.'+@primaryKey +' values (GETDATE (),GETDATE(),'+Cast (@userId as nvarchar(max))+','+ Cast((select dbo.ufn_GetownedbyId (@userId )) as nvarchar)+','+@Value+')')\n \n exec  sp_executesql @Qry;\n  \n --print @Qry\n  end--2\n  \n  else\n  begin--3\n                SELECT @updateQry = COALESCE(@updateQry+', ' ,' ') + Fieldname  +'='+ (Case Value When null Then '' Else +''''+ Value +'''' end) \n               FROM @UDTT  where  Fieldname <>'created_on'and Fieldname <> 'updated_on'  and    Fieldname <> 'owned_by' and  Fieldname <> 'created_by' and  Fieldname <> @primaryKey\n  set @Qry =('Update '+@tableName+'  set '+ @updateQry +',updated_on = GETDATE() OUTPUT INSERTED.'+@primaryKey+' WHERE '+@primaryKey +'='+  (CONVERT(nvarchar(10),@Id )))\n exec  sp_executesql @Qry;\n  end--3\n  end--1\n \n ", "CREATE TRIGGER Billwise_Detail_ledger_balance_history \nON dbo.nxt_billwise_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nSELECT INSERTED.nxt_billwise_org_id,INSERTED.nxt_billwise_ledger_id,INSERTED.nxt_billwise_detail_id,'REC',INSERTED.nxt_billref_amount,INSERTED.nxt_billref_value_type,INSERTED.nxt_billref_no,INSERTED.nxt_billref_date,'0' FROM INSERTED\nEND\n\n", "CREATE TRIGGER Billwise_Deatil_ledger_balance_history_delete\nON dbo.nxt_billwise_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_billwise_detail_id FROM DELETED) AND ledger_his_trans_type = 'REC'\nEND\n\n", "CREATE TRIGGER Goods_Receipt_Stock_Bin_Wise\nON nxt_goods_receipt_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate) \nSELECT 'GRN',INSERTED.nxt_goods_receipt_detail_id,INSERTED.nxt_goods_receipt_bin,INSERTED.nxt_material_name,INSERTED.nxt_goods_receipt_qty,INSERTED.nxt_goods_receipt_rate  FROM INSERTED\nEND\n\n\n", "CREATE TRIGGER Goods_Receipt_Stock_Bin_Wise_Delete\nON nxt_goods_receipt_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_bin_wise_stock_history WHERE stock_hist_trans_id = (SELECT nxt_goods_receipt_detail_id FROM DELETED) AND stock_hist_trans_type = 'GRN'\nEND\n\n", "CREATE TRIGGER  Opening_Stock_Bin_Wise \nON nxt_opening_stock_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate) \nSELECT 'OP',INSERTED.nxt_opening_stock_detail_id,INSERTED.nxt_opening_stock_bin,INSERTED.nxt_material_name,INSERTED.nxt_opening_stock_qty,INSERTED.nxt_opening_stock_rate  FROM INSERTED\nEND\n\n\n", "CREATE TRIGGER Opening_Stock_Bin_Wise_Delete\nON nxt_opening_stock_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_bin_wise_stock_history WHERE stock_hist_trans_id = (SELECT nxt_opening_stock_detail_id  FROM DELETED) AND  stock_hist_trans_type = 'OP'\nEND\n\n\n\n", "CREATE TRIGGER  Purchase_Ledger_balance_history \nON nxt_purchase\nAFTER INSERT AS\nBEGIN\nDECLARE @gTotal nvarchar(max)\nSET NOCOUNT ON;\nSELECT @gTotal = I.nxt_purchase_gtotal FROM Inserted I\nIF (@gTotal != NULL OR @gTotal != 0 )\nbegin\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_purchase_igst_id,nxt_purchase_id,'PURH',ISNULL(nxt_purchase_igst,0),1,'1',GETDATE(),'0' FROM INSERTED\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect a.org_id,a.nxt_purchase_cgst_id,a.nxt_purchase_id,'PURH',Isnull (a.nxt_purchase_cgst ,0),1,'1',GETDATE(),'0'  FROM INSERTED a\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_purchase_sgst_id,nxt_purchase_id,'PURH',Isnull(nxt_purchase_sgst ,0),1,'1',GETDATE(),'0'  FROM INSERTED\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_purchase_disc,nxt_purchase_id,'PURH', CASE  WHEN nxt_purchase_disc  Is null THEN 0 ELSE '-'+nxt_purchase_disc END,1,'1',GETDATE(),'0'  FROM INSERTED\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_purchase_round_off_id,nxt_purchase_id,'PURH',CASE WHEN nxt_purchase_round_off_id < 0 THEN '-'+nxt_purchase_round_off ELSE nxt_purchase_round_off END,1,'1',GETDATE(),'0'  FROM INSERTED\nend\nEND\n\n\n", "CREATE TRIGGER Purchase_Ledger_balance_history_Delete\nON nxt_purchase\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_purchase_id  FROM DELETED) AND  ledger_his_trans_type = 'PURH'\nEND\n\n\n\n", "CREATE TRIGGER Purchase_Detail_Ledger_balance_history\nON dbo.nxt_purchase_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status)\nSELECT INSERTED.nxt_org_id,INSERTED.nxt_purchase_prod_led_id,INSERTED.nxt_purchase_detail_id,'PURD',INSERTED.nxt_purchase_amount,CASE WHEN nxt_purchase_amount < 0 then 0 Else 1 END,'1',GETDATE(),'0'  FROM INSERTED\nEND\n\n", "CREATE TRIGGER Purchase_Detail_Ledger_balance_history_Delete\nON nxt_purchase_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_purchase_detail_id  FROM DELETED) AND  ledger_his_trans_type = 'PURD'\nEND\n\n\n", "CREATE TRIGGER Purchase_Stock_Bin_Wise \nON dbo.nxt_purchase_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate)\nSELECT 'PUR',INSERTED.nxt_purchase_detail_id,INSERTED.nxt_purchase_bin,INSERTED.nxt_material_name,INSERTED.nxt_purchase_qty,INSERTED.nxt_purchase_rate  FROM INSERTED\nEND\n\n\n", "Create TRIGGER Purchase_Stock_Bin_Wise_Delete\nON nxt_purchase_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_bin_wise_stock_history WHERE stock_hist_trans_id = (SELECT nxt_purchase_detail_id  FROM DELETED) AND  stock_hist_trans_type = 'PUR'\nEND\n\n\n", "CREATE TRIGGER Billwise_ledger_balance_history \nON dbo.nxt_purvch_detail_1\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status)\nSELECT i.nxt_org_id,i.nxt_ledger,i.nxt_purvch_detail_1_id,'PURV',CASE When nxt_value_type =2 then '-'+i.nxt_purvch_amt else i.nxt_purvch_amt end, i.nxt_value_type,'1','1753-01-01 00:00:00','0' FROM INSERTED i\nEND\n\n\n", "CREATE TRIGGER Billwise_ledger_balance_history_Delete\nON nxt_purvch_detail_1\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_purvch_detail_1_id  FROM DELETED) AND  ledger_his_trans_type = 'PURV'\nEND\n\n\n\n\n", "CREATE TRIGGER  Sales_Ledger_Balance_History\nON nxt_sales\nAFTER INSERT AS\nBEGIN\nDECLARE @gTotal nvarchar(max)\nSET NOCOUNT ON;\nSELECT @gTotal = I.nxt_sales_gtotal FROM Inserted I\nIF (@gTotal != NULL OR @gTotal != 0 )\nbegin\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status)  \nselect org_id,nxt_sales_igst_id,nxt_sales_id,'SALH',ISNULL(nxt_sales_igst,0),1,'1',GETDATE(),'0' FROM INSERTED\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect a.org_id,a.nxt_sales_cgst_id,a.nxt_sales_id,'SALH',Isnull (a.nxt_sales_cgst ,0),1,'1',GETDATE(),'0'  FROM INSERTED a\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_sales_sgst_id,nxt_sales_id,'SALH',Isnull(nxt_sales_sgst ,0),1,'1',GETDATE(),'0'  FROM INSERTED\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_sales_disc,nxt_sales_id,'SALH', ISNULL(nxt_sales_disc,0),1,'1',GETDATE(),'0'  FROM INSERTED\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nselect org_id,nxt_round_off_id,nxt_sales_id,'SALH', ISNULL(nxt_round_off_id,0),1,'1',GETDATE(),'0'  FROM INSERTED\nend\nEND\n\n", "CREATE TRIGGER Sales_ledger_balance_history_Delete\nON nxt_sales\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_sales_id  FROM DELETED) AND  ledger_his_trans_type = 'SALH'\nEND\n\n\n", "CREATE TRIGGER Sales_Order_History \nON dbo.nxt_sales_detail\nAFTER INSERT AS\nBEGIN\nDECLARE @orderNo int\nSET NOCOUNT ON;\nSELECT @orderNo = I.nxt_sales_order_no FROM Inserted I\nIF (@orderNo != NULL )\nbegin\nINSERT INTO  nxt_salesorder_histrory (    so_history_so_id ,  so_history_sales_id ,  so_history_sales_de_id ,  so_history_p_id , so_history_qty ) \nSELECT nxt_sales_order_no, nxt_sales_id, nxt_sales_detail_id, nxt_material_name, nxt_sales_qty  FROM INSERTED \nend\nEND\n\n", "CREATE TRIGGER Sales_Stock_Bin_Wise_Delete\nON nxt_sales_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_bin_wise_stock_history WHERE stock_hist_trans_id = (SELECT nxt_sales_detail_id  FROM DELETED) AND  stock_hist_trans_type = 'SAL'\nEND\n\n", "CREATE TRIGGER Sales_Order_History_Delete\nON nxt_sales_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_salesorder_histrory WHERE so_history_sales_de_id = (SELECT nxt_sales_detail_id  FROM DELETED) AND  so_history_so_id = (Select nxt_sales_order_no FROM DELETED)  AND so_history_p_id = (Select nxt_material_name FROM DELETED) \nEND\n\n\n", "CREATE TRIGGER Sales_Details_Ledger_Balance_History_Delete\nON nxt_sales_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_sales_detail_id  FROM DELETED) AND ledger_his_trans_type = 'SALD'\nEND\n\n", "CREATE TRIGGER Sales_Stock_Bin_Wise \nON dbo.nxt_sales_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate) \nSELECT 'SAL',nxt_sales_detail_id,nxt_sales_bin,nxt_material_name,'-'+nxt_sales_qty,nxt_sales_rate FROM INSERTED\nEND\n\n\n", "CREATE TRIGGER Sales_Details_Ledger_balance_history \nON dbo.nxt_sales_detail\nAFTER INSERT AS\nBEGIN\nDECLARE @Amount nvarchar(max)\nSET NOCOUNT ON;\nSELECT @Amount = I.nxt_sales_amount FROM Inserted I\nIF (@Amount != NULL  AND @Amount != 0)\nbegin\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nSELECT nxt_org_id,nxt_sales_prod_led_id,nxt_sales_detail_id,'SALD',Case when nxt_sales_amount <0 then '-'+nxt_sales_amount else nxt_sales_amount end,Case when nxt_sales_amount <0 then 0 else 1 end ,'1',getdate(),'0'  FROM INSERTED \nend\nEND\n\n", "CREATE TRIGGER Sales_Return_Stock_Bin_Wise_Delete\nON nxt_sales_return_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_bin_wise_stock_history WHERE stock_hist_trans_id = (SELECT nxt_sales_return_detail_id  FROM DELETED) AND stock_hist_trans_type = 'SAR'\nEND\n\n\n", "CREATE TRIGGER Sales_History_Delete\nON nxt_sales_return_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_sales_return_histrory WHERE sr_history_s_return_de_id = (SELECT nxt_sales_return_detail_id  FROM DELETED) AND s_history_p_id = (SELECT nxt_material_name  FROM DELETED)\nEND\n\n", "CREATE TRIGGER Sales_Return_Stock_Bin_Wise \nON dbo.nxt_sales_return_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate) \nSELECT 'SAR',nxt_sales_return_detail_id,nxt_sales_return_bin,nxt_material_name,'-'+nxt_sales_return_qty,nxt_sales_return_rate FROM INSERTED\nEND\n\n", "CREATE TRIGGER Billwise_ledger_balance_history_from_Sales_Delete\nON nxt_srtvch_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_srtvch_detail_id  FROM DELETED) AND ledger_his_trans_type = 'SRTV'\nEND\n\n\n", "CREATE TRIGGER Billwise_ledger_balance_history_from_Sales_detail_1_Delete\nON nxt_salvch_detail_1\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_salvch_detail_1_id FROM DELETED) AND ledger_his_trans_type = 'SALV'\nEND\n\n\n", "CREATE TRIGGER Billwise_ledger_balance_history_from_Sales\nON dbo.nxt_srtvch_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status)  \nSELECT nxt_org_id,nxt_ledger,nxt_srtvch_detail_id,'SRTV',case when nxt_value_type = 2 then '-'+nxt_srtvch_amt else nxt_srtvch_amt end ,nxt_value_type,'1',NULL,'0' FROM INSERTED\nEND\n\n", "CREATE TRIGGER Billwise_ledger_balance_history_from_Sales_detail_1\nON dbo.nxt_salvch_detail_1\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nSELECT nxt_org_id,nxt_ledger,nxt_salvch_detail_1_id,'SALV',case when nxt_value_type = 2 then '-'+nxt_salvch_amt else nxt_salvch_amt end,nxt_value_type,'1','1753-01-01 00:00:00','0' FROM INSERTED\nEND\n\n", "CREATE TRIGGER Billwise_ledger_balance_history_from_StockTransfer\nON dbo.nxt_stkvch_detail\nAFTER INSERT AS\nBEGIN\nINSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status) \nSELECT nxt_org_id,nxt_ledger,nxt_stkvch_detail_id,'STKV',case when nxt_value_type = 2 then '-'+nxt_stkvch_amt else nxt_stkvch_amt end,nxt_value_type,'1',NULL,'0' FROM INSERTED\nEND\n\n", "CREATE TRIGGER Stocktransfer_Ledger_balance_history \nON dbo.nxt_stockTransfer\nAFTER INSERT AS\nBEGIN\nDECLARE @igst nvarchar(max)\nSET NOCOUNT ON;\nSELECT @igst = I.nxt_stockTransfer_igst FROM Inserted I\nIF (@igst != NULL AND @igst!= 0)\nbegin\nINSERT INTO  nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status)  \nSELECT org_id,nxt_stockTransfer_igst_id,nxt_stockTransfer_id,'STKH',case when nxt_stockTransfer_type='N' then '-'+nxt_stockTransfer_igst else nxt_stockTransfer_igst end,1,'1',getdate(),'0'  FROM INSERTED \nend\nEND\n\n\n", "CREATE TRIGGER Stocktransfer_Ledger_Balance_History_Delete\nON nxt_stockTransfer\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_stockTransfer_id FROM DELETED) AND ledger_his_trans_type = 'STKH'\nEND\n\n", "CREATE TRIGGER stkvch_Ledger_Balance_History_Delete\nON nxt_stkvch_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_stkvch_detail_id FROM DELETED) AND ledger_his_trans_type = 'STKV'\nEND\n\n	\n", "CREATE TRIGGER Stock_Trasfer_Out_Bin_Wise \nON dbo.nxt_stockTransfer_detail\nAFTER INSERT AS\nBEGIN\nDECLARE @Type nvarchar(max)\nSET NOCOUNT ON;\nSELECT @Type = I.nxt_stockTransfer_type FROM Inserted I\nIF (@Type ='N')\nbegin\n   INSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate) \nSELECT 'STKN',nxt_stockTransfer_detail_id,nxt_stockTransfer_bin,nxt_material_name,'-'+nxt_stockTransfer_qty,nxt_stockTransfer_rate  FROM INSERTED \nend\nelse\nbegin\nINSERT INTO nxt_bin_wise_stock_history (stock_hist_trans_type,stock_hist_trans_id,stock_hist_bin,stock_hist_prod,stock_hist_qty,stock_hist_rate) \nSELECT 'STKP',nxt_stockTransfer_detail_id,nxt_stockTransfer_bin,nxt_material_name,nxt_stockTransfer_qty,nxt_stockTransfer_rate FROM INSERTED \nend\nEND\n\n", "CREATE TRIGGER Stock_Trasfer_Out_Bin_Wise_Delete\nON nxt_stockTransfer_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_bin_wise_stock_history WHERE stock_hist_trans_id = (SELECT nxt_stockTransfer_detail_id FROM DELETED) AND ( stock_hist_trans_type = 'STKP' OR stock_hist_trans_type = 'STKN' )\nEND\n", "CREATE TRIGGER Stocktransfer_Detail_Ledger_Balance_History_Delete\nON nxt_stockTransfer_detail\nAFTER DELETE AS\nBEGIN\nDELETE FROM nxt_ledger_wise_history WHERE ledger_his_trans_id = (SELECT nxt_stockTransfer_detail_id FROM DELETED) AND ledger_his_trans_type = 'STKD'\nEND\n\n\n\n", "CREATE TRIGGER StockTransfer_Detail_Ledger_Balance_History \nON dbo.nxt_stockTransfer_detail\nAFTER INSERT AS\nBEGIN\nDECLARE @Amount nvarchar(max)\nSET NOCOUNT ON;\nSELECT @Amount = I.nxt_stockTransfer_amount FROM Inserted I\nIF (@Amount != NULL OR @Amount !=0)\nbegin\n  INSERT INTO nxt_ledger_wise_history (ledger_his_org_id,ledger_his_led_id,ledger_his_trans_id,ledger_his_trans_type,ledger_his_amount,ledger_his_type,ledger_his_ref_no,ledger_his_date,ledger_his_status)  \nSELECT nxt_org_id,nxt_stockTransfer_prod_led_id,nxt_stockTransfer_detail_id,'STKD',case  when nxt_stockTransfer_type = 'N' then '-'+nxt_stockTransfer_amount else nxt_stockTransfer_amount end ,case when nxt_stockTransfer_type < 0 then 0 else 1 end ,'1',getdate(),'0'  FROM INSERTED \nend\nEND\n\n","CREATE VIEW dbo.[materialTax]  AS  (select nxt_material.nxt_material_id AS nxt_material_id,nxt_material.nxt_material_category AS nxt_material_category,nxt_material.nxt_primary_uom AS nxt_primary_uom,nxt_material.nxt_hsn_code AS nxt_hsn_code,nxt_material.nxt_material_group AS nxt_material_group,nxt_material.nxt_purchase_ledger_name AS nxt_purchase_ledger_name,nxt_material.nxt_sales_ledger_name AS nxt_sales_ledger_name,nxt_tax_new.nxt_tax_new_id AS nxt_tax_new_id,nxt_tax_new.nxt_tax_new_type AS nxt_tax_new_type,nxt_tax_new.nxt_tax_new_beh AS nxt_tax_new_beh,nxt_tax_new.nxt_eff_date AS nxt_eff_date,nxt_tax_new.nxt_tax_new_per AS nxt_tax_new_per,nxt_tax_new.nxt_tax_new_state AS nxt_tax_new_state from (nxt_material join nxt_tax_new on((nxt_tax_new.nxt_tax_new_id_link = nxt_material.nxt_material_id))))" ,"CREATE VIEW dbo.[priceView]  AS  (select distinct nxt_bin.nxt_bin_id AS nxt_bin_id,nxt_prod_price.nxt_prod_price_prod_id AS nxt_prod_price_prod_id,nxt_prod_price.nxt_prod_price_val AS nxt_prod_price_val,nxt_prod_price.nxt_prod_price_date AS nxt_prod_price_date,nxt_bin.nxt_bin_catgory AS nxt_bin_catgory from (nxt_prod_price join nxt_bin on((nxt_bin.nxt_bin_catgory = nxt_prod_price.nxt_prod_price_prod_type))))", "CREATE   VIEW [dbo].[sr_history_view]  AS  (select nxt_salesreturn_histrory.sr_history_s_return_id AS sr_his_id,sum(Cast (nxt_salesreturn_histrory.sr_history_qty as Bigint)) AS sr_his_qty from nxt_salesreturn_histrory group by nxt_salesreturn_histrory.sr_history_s_return_id)", "CREATE  VIEW userWarehouse  AS  (select nxt_warehouse.nxt_warehouse_id AS nxt_warehouse_id,nxt_warehouse.nxt_warehouse_name AS nxt_warehouse_name,nxt_warehouse.nxt_warehouse_code AS nxt_warehouse_code,nxt_warehouse.nxt_org_name AS nxt_org_name,tb_org_users.org_users_user_id AS org_users_user_id from (nxt_warehouse join tb_org_users on((tb_org_users.org_users_org_war_id = nxt_warehouse.nxt_warehouse_id))))","CREATE VIEW [dbo].[sales_return_pending]  AS  (select a.nxt_sales_id AS nxt_sales_id,a.nxt_sales_invoice_no AS nxt_sales_invoice_no,a.nxt_sales_invoice_date AS nxt_sales_invoice_date,a.nxt_sales_invoice_type AS nxt_sales_invoice_type,a.nxt_sales_invoice_ref_no AS nxt_sales_invoice_ref_no,a.nxt_sales_invoice_ref_date AS nxt_sales_invoice_ref_date,a.org_id AS org_id,a.nxt_warehouse AS nxt_warehouse,a.nxt_party_name AS nxt_party_name,a.nxt_bill_to AS nxt_bill_to,a.nxt_bill_address AS nxt_bill_address,a.nxt_bill_country AS nxt_bill_country,a.nxt_bill_state AS nxt_bill_state,a.nxt_bill_city AS nxt_bill_city,a.nxt_bill_zip AS nxt_bill_zip,a.nxt_ship_to AS nxt_ship_to,a.nxt_ship_address AS nxt_ship_address,a.nxt_ship_country AS nxt_ship_country,a.nxt_ship_state AS nxt_ship_state,a.nxt_ship_city AS nxt_ship_city,a.nxt_ship_zip AS nxt_ship_zip,a.nxt_party_contact_name AS nxt_party_contact_name,a.nxt_party_email AS nxt_party_email,a.nxt_party_phone AS nxt_party_phone,a.nxt_sales_remarks AS nxt_sales_remarks,a.nxt_sales_sub_total AS nxt_sales_sub_total,a.nxt_sales_disc AS nxt_sales_disc,a.nxt_sales_gtotal AS nxt_sales_gtotal,a.nxt_sales_cgst AS nxt_sales_cgst,a.nxt_sales_sgst AS nxt_sales_sgst,a.nxt_sales_igst AS nxt_sales_igst,a.nxt_sales_order_no AS nxt_sales_order_no,a.Salesman AS Salesman,a.nxt_state_gst_from AS nxt_state_gst_from,a.nxt_state_gst_to AS nxt_state_gst_to,a.created_by AS created_by,a.owned_by AS owned_by,a.created_on AS created_on,a.updated_on AS updated_on,a.nxt_round_off AS nxt_round_off,a.nxt_sales_status AS nxt_sales_status,b.nxt_sales_detail_id AS sr_pid,b.nxt_sales_id AS sr_id,b.nxt_material_name AS nxt_material_name,b.nxt_hsn_code AS nxt_hsn_code,b.nxt_sales_serial_no AS nxt_sales_serial_no,b.nxt_sales_qty AS nxt_sales_qty,c.sr_his_qty AS sr_his_qty,(b.nxt_sales_qty - c.sr_his_qty) AS pendingQty,b.nxt_sales_uom AS nxt_sales_uom,b.nxt_sales_rate AS nxt_sales_rate,b.nxt_sales_discount_per AS nxt_sales_discount_per,b.nxt_sales_discount_value AS nxt_sales_discount_value,b.nxt_sales_amount AS nxt_sales_amount,b.nxt_cmn_igst AS nxt_cmn_igst,b.nxt_cmn_igst_amt AS nxt_cmn_igst_amt,b.nxt_cmn_cgst AS nxt_cmn_cgst,b.nxt_cmn_cgst_amt AS nxt_cmn_cgst_amt,b.nxt_cmn_sgst AS nxt_cmn_sgst,b.nxt_cmn_sgst_amt AS nxt_cmn_sgst_amt from ((nxt_sales a join nxt_sales_detail b on((a.nxt_sales_id = b.nxt_sales_id))) left join sr_history_view c on((c.sr_his_id = b.nxt_sales_detail_id))) where ((b.nxt_sales_line_status = 'Not Returned') and (a.nxt_sales_status = 'Not Returned') and ((b.nxt_sales_qty - isnull(c.sr_his_qty,0)) > 0)))" } ;

    }
}