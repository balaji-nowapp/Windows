using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pidilite
{
    public static class StoreProcedure
    {

        public static string str = "IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'user_photo' AND Object_ID = Object_ID(N'dbo.tb_users'))\n BEGIN \n  ALTER TABLE tb_users ADD user_photo varbinary(max) null   \n END \n Go \n \nIF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'WPassword' AND Object_ID = Object_ID(N'dbo.tb_users')) BEGIN \n    ALTER TABLE tb_users ADD WPassword nvarchar(max) null \n    END \n   Go \n \nIF EXISTS(SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_GetMenubyParent]') AND type in (N'P', N'PC'))\n  DROP PROCEDURE[dbo].[usp_GetMenubyParent] \n GO \n\n CREATE procedure[dbo].[usp_GetMenubyParent] \n ( @parentId smallint ) \n as \n begin \n  if exists(Select* from tb_menu with(nolock) where parent_id = @parentId ) \n          begin \n --if (@parentId =0) \n --begin \n select menu_id as id, menu_name as name, menu_icons as logoClass, menu_icons_code as logo, menu_bg_color as backgroundColor, parent_id as parentId, module as moduleName, menu_module_id as moduleId, position as position, ordering as ordering from tb_menu with (nolock) where parent_id = @ParentId and position ='sidebar' order by ordering asc \n -- end \n --else \n  --begin \n --    select menu_id as id, menu_name as name, menu_icons as logoClass, menu_icons_code as logo, menu_bg_color as backgroundColor, parent_id as parentId, module as moduleName, menu_module_id as moduleId, position as position, ordering as ordering from tb_menu with(nolock) where menu_id = @ParentId and position ='sidebar' \n  -- end \n  end \n end \n GO  \n IF  EXISTS (SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_InsertMenu]') AND type in (N'P', N'PC')) DROP PROCEDURE[dbo].[usp_InsertMenu] \n GO \n create Procedure[dbo].[usp_InsertMenu] \n ( \n @id int,\n @name varchar(max),\n @logoClass varchar(max),\n @logo varchar(max),\n @backgroundColor varchar(max),\n @parentId int,\n @moduleName varchar(max),\n @moduleId int,\n @position varchar(max),\n @ordering int , \n @OpCode smallint output ) \n as \n begin \n SET IDENTITY_INSERT tb_menu ON \n if not exists(Select menu_id from tb_menu with(nolock) where menu_id = @id) \n begin \n Insert into tb_menu (menu_id, menu_name, menu_icons, menu_icons_code, menu_bg_color, parent_id, module, menu_module_id, position, ordering, entry_by, owned_by, created_by ) \n  values (@id, @name, @logoClass, @logo, @backgroundColor, @parentId, @moduleName, @moduleId, @position, @ordering,0,0,0) \n  set @OpCode = 1 \n  end \n  else \n  begin \n  set @OpCode =-1 \n  end \n SET IDENTITY_INSERT tb_menu OFF \n end \n GO \n \n IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_LoginCheck]') AND type in (N'P', N'PC'))\n DROP PROCEDURE [dbo].[usp_LoginCheck] \n \nGO \n \n create procedure[dbo].[usp_LoginCheck] \n( \n @UserName varchar(max), \n @Password varchar(max), \n @OpCode bigint output \n )  \n as \n begin \n Declare @Action smallint  \n  if exists(select id from tb_users with(nolock) where email =@UserName ) \n begin \n if exists( select id from tb_users with(nolock) where email =@UserName and WPassword=@Password ) \n   begin  \n set @OpCode = (select id from tb_users with(nolock) where email =@UserName and WPassword = @Password)-- Valid User   \n set @Action = (select active from tb_users with(nolock) where email =@UserName and WPassword = @Password)\n if (@Action =0)\n begin \n set @OpCode = -1 -- Inactive user   \n end  else if  (@Action =2) \n begin  \n  set @OpCode = -2 -- Blocked User \n end    \n  end   \n else  \n  set @OpCode = -4 -- No WPassword Saved   \n end   \n else   \n  begin \n  set @OpCode = -3-- Incorrect Credentials \n  end \n  end \n GO \n  \n IF  EXISTS (SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ufn_GetParentIdsofMenu]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))\n DROP FUNCTION[dbo].[ufn_GetParentIdsofMenu]\n         GO\n\n CREATE function[dbo].[ufn_GetParentIdsofMenu] \n ()   returns nvarchar(max) \n  as \n begin \n Declare @Return nvarchar(max) \n set @Return =  (Select Distinct Stuff( (Select ',' + cast(menu_id as nvarchar(max)) From tb_menu q1 where q1.parent_id = 0 and q1.position = 'sidebar' Order By  q1.ordering asc  For XML Path(''),Type).value('text()[1]','varchar(max)'),1,1,'')) \n return  @Return \n  end \n GO \n \n  IF EXISTS(SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_GetUserDetail]') AND type in (N'P', N'PC')) \n DROP PROCEDURE[dbo].[usp_GetUserDetail] \n GO \n \n Create proc[dbo].[usp_GetUserDetail]\n( \n @UserId bigint \n )\n as \n begin \n select a.first_name as FirstName, a.last_name as LastName , a.user_photo as Photo from tb_users a with(nolock) where id=  @UserId \n end \n  GO \n \n IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'sql_Select' AND Object_ID = Object_ID(N'dbo.tb_module')) \n BEGIN \n     ALTER TABLE tb_module ADD sql_Select nvarchar(max) null \n  END \n  Go\n \n  IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'sql_Where' AND Object_ID = Object_ID(N'dbo.tb_module'))\n BEGIN \n ALTER TABLE tb_module ADD sql_Where nvarchar(max) null \n   END \n    Go \n \n IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'sql_Group' AND Object_ID = Object_ID(N'dbo.tb_module')) \n BEGIN \n  ALTER TABLE tb_module ADD sql_Group nvarchar(max) null \n  END \n   Go \n \n IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'module_Form' AND Object_ID = Object_ID(N'dbo.tb_module')) \n BEGIN \n ALTER TABLE tb_module ADD module_Form nvarchar(max) null \n  END \n Go \n  \n  IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = N'module_Grid' AND Object_ID = Object_ID(N'dbo.tb_module')) \n BEGIN \n  ALTER TABLE tb_module ADD module_Grid nvarchar(max) null \n  END \n    Go \n \n IF  EXISTS (SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_InsertModuleDetails]') AND type in (N'P', N'PC')) \n DROP PROCEDURE[dbo].[usp_InsertModuleDetails] \n GO \n  \n CREATE procedure[dbo].[usp_InsertModuleDetails] \n ( \n  \n @ModuleId int, \n  \n @ModuleName varchar(100),\n  \n @ModuleTitle varchar(100), \n @ModuleNote varchar(255), \n @ModuleDB varchar(100), \n @ModuleDBKey varchar(100), \n @ModuleType varchar(max), \n @ModuleDivision varchar(10), \n @ModuleAccessServer varchar(max), \n @ModuleForm nvarchar(max), \n @ModuleGrid nvarchar(max), \n @SqlSelect nvarchar(max), \n @SqlWhere nvarchar(max), \n @SqlGroup nvarchar(max), \n @OpCode nvarchar(max) output )\n as \n begin \n SET IDENTITY_INSERT tb_module ON \n if not exists(Select module_id from tb_module with(nolock) where module_id =  \n @ModuleId) \n begin \n Insert into tb_module (module_id, module_name, module_title, module_note, module_author, module_db, module_db_key, module_type, module_division, module_access_server, module_Form, module_Grid, sql_Group, sql_Select, sql_Where ) values ( \n @ModuleId,  \n @ModuleName,  \n @ModuleTitle,  \n @ModuleNote,1,  \n @ModuleDB,  \n @ModuleDBKey,  \n @ModuleType,  \n @ModuleDivision,  \n @ModuleAccessServer,  \n @ModuleForm,  \n @ModuleGrid,  \n @SqlGroup,  \n @SqlSelect,  \n @SqlWhere)  \n set @OpCode = 1  \n end  \n else \n  begin  \n  update tb_module set module_title=@ModuleTitle, module_note=@ModuleNote, module_author=1, module_db=@ModuleDB, module_db_key=@ModuleDBKey, module_type=@ModuleType, module_division=@ModuleDivision, module_access_server=@ModuleAccessServer, module_Form=@ModuleForm, module_Grid=@ModuleGrid, sql_Group=@SqlGroup, sql_Select=@SqlSelect, sql_Where=@SqlWhere where module_id= @ModuleId \n set @OpCode = 0 \n end \n SET IDENTITY_INSERT tb_module OFF \n end \n GO \n \n  IF  EXISTS (SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_GetModuleDetailsByID]') AND type in (N'P', N'PC'))DROP PROCEDURE[dbo].[usp_GetModuleDetailsByID] \n  GO \n \n Create Procedure[dbo].[usp_GetModuleDetailsByID]\n ( \n @IsForm bit, \n @ModuleId int ) as \n begin \n if ( \n @IsForm = 1) \n begin \n Select module_title as Title, module_Form as Form , '' as Grid , module_db as TableName from tb_module with(nolock) \n where module_id =  \n @ModuleId \n end \n else \n begin \n Select module_title as Title, '' as Form, module_Grid as Grid, module_db as TableName from tb_module with(nolock) \n where module_id =  \n @ModuleId \n end \n end \n GO \n \n  \n IF  EXISTS (SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_GetValuesforDropDown]') AND type in (N'P', N'PC')) \n DROP PROCEDURE[dbo].[usp_GetValuesforDropDown]     \n GO \n \n CREATE procedure[dbo].[usp_GetValuesforDropDown]  \n( \n @TableName nvarchar(100), \n @Key nvarchar(100), \n @Value nvarchar(100)) \n as \n begin \n Declare  \n @Qry nvarchar(max) \n set  \n @Qry = 'Select ' +  \n @Key + ' as Id ,' +  \n @Value + ' as Value from ' +  \n @TableName + ' with(nolock)'\n  EXECUTE sp_executesql  \n @Qry \n end \n GO  \n \n IF EXISTS(SELECT* FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_UpadteUserWPassword]') AND type in (N'P', N'PC'))\n DROP PROCEDURE[dbo].[usp_UpadteUserWPassword] \n GO \n \n Create Procedure[dbo].[usp_UpadteUserWPassword] \n( \n @UserName nvarchar(max), \n @Password nvarchar(max), \n @UserPhoto varbinary(max)) \n as \n begin \n Update tb_users set WPassword = @Password, user_photo=@UserPhoto where email = @UserName \n end \n \n GO";

        public static string[] spArray = { "ALTER TABLE tb_users ADD user_photo varbinary(max) null" , "ALTER TABLE tb_users ADD WPassword nvarchar(max) null" ,"CREATE procedure[dbo].[usp_GetMenubyParent] \n ( @parentId smallint ) \n as \n begin \n  if exists(Select* from tb_menu with(nolock) where parent_id = @parentId ) \n          begin \n --if (@parentId =0) \n --begin \n select menu_id as id, menu_name as name, menu_icons as logoClass, menu_icons_code as logo, menu_bg_color as backgroundColor, parent_id as parentId, module as moduleName, menu_module_id as moduleId, position as position, ordering as ordering from tb_menu with (nolock) where parent_id = @ParentId and position ='sidebar' order by ordering asc \n -- end \n --else \n  --begin \n --    select menu_id as id, menu_name as name, menu_icons as logoClass, menu_icons_code as logo, menu_bg_color as backgroundColor, parent_id as parentId, module as moduleName, menu_module_id as moduleId, position as position, ordering as ordering from tb_menu with(nolock) where menu_id = @ParentId and position ='sidebar' \n  -- end \n  end \n end",  "create Procedure[dbo].[usp_InsertMenu] \n ( \n @id int,\n @name varchar(max),\n @logoClass varchar(max),\n @logo varchar(max),\n @backgroundColor varchar(max),\n @parentId int,\n @moduleName varchar(max),\n @moduleId int,\n @position varchar(max),\n @ordering int , \n @OpCode smallint output ) \n as \n begin \n SET IDENTITY_INSERT tb_menu ON \n if not exists(Select menu_id from tb_menu with(nolock) where menu_id = @id) \n begin \n Insert into tb_menu (menu_id, menu_name, menu_icons, menu_icons_code, menu_bg_color, parent_id, module, menu_module_id, position, ordering, entry_by, owned_by, created_by ) \n  values (@id, @name, @logoClass, @logo, @backgroundColor, @parentId, @moduleName, @moduleId, @position, @ordering,0,0,0) \n  set @OpCode = 1 \n  end \n  else \n  begin \n  set @OpCode =-1 \n  end \n SET IDENTITY_INSERT tb_menu OFF \n end", "create procedure[dbo].[usp_LoginCheck] \n( \n @UserName varchar(max), \n @Password varchar(max), \n @OpCode bigint output \n )  \n as \n begin \n Declare @Action smallint  \n  if exists(select id from tb_users with(nolock) where email =@UserName ) \n begin \n if exists( select id from tb_users with(nolock) where email =@UserName and WPassword=@Password ) \n   begin  \n set @OpCode = (select id from tb_users with(nolock) where email =@UserName and WPassword = @Password)-- Valid User   \n set @Action = (select active from tb_users with(nolock) where email =@UserName and WPassword = @Password)\n if (@Action =0)\n begin \n set @OpCode = -1 -- Inactive user   \n end  else if  (@Action =2) \n begin  \n  set @OpCode = -2 -- Blocked User \n end    \n  end   \n else  \n  set @OpCode = -4 -- No WPassword Saved   \n end   \n else   \n  begin \n  set @OpCode = -3-- Incorrect Credentials \n  end \n  end", "CREATE function[dbo].[ufn_GetParentIdsofMenu] \n ()   returns nvarchar(max) \n  as \n begin \n Declare @Return nvarchar(max) \n set @Return =  (Select Distinct Stuff( (Select ',' + cast(menu_id as nvarchar(max)) From tb_menu q1 where q1.parent_id = 0 and q1.position = 'sidebar' Order By  q1.ordering asc  For XML Path(''),Type).value('text()[1]','varchar(max)'),1,1,'')) \n return  @Return \n  end","Create proc[dbo].[usp_GetUserDetail]\n( \n @UserId bigint \n )\n as \n begin \n select a.first_name as FirstName, a.last_name as LastName , a.user_photo as Photo from tb_users a with(nolock) where id=  @UserId \n end", "ALTER TABLE tb_module ADD sql_Select nvarchar(max) null","ALTER TABLE tb_module ADD sql_Where nvarchar(max) null", "ALTER TABLE tb_module ADD sql_Group nvarchar(max) null","ALTER TABLE tb_module ADD module_Form nvarchar(max) null","ALTER TABLE tb_module ADD module_Grid nvarchar(max) null", "CREATE procedure[dbo].[usp_InsertModuleDetails] \n ( \n  \n @ModuleId int, \n  \n @ModuleName varchar(100),\n  \n @ModuleTitle varchar(100), \n @ModuleNote varchar(255), \n @ModuleDB varchar(100), \n @ModuleDBKey varchar(100), \n @ModuleType varchar(max), \n @ModuleDivision varchar(10), \n @ModuleAccessServer varchar(max), \n @ModuleForm nvarchar(max), \n @ModuleGrid nvarchar(max), \n @SqlSelect nvarchar(max), \n @SqlWhere nvarchar(max), \n @SqlGroup nvarchar(max), \n @OpCode nvarchar(max) output )\n as \n begin \n SET IDENTITY_INSERT tb_module ON \n if not exists(Select module_id from tb_module with(nolock) where module_id =  \n @ModuleId) \n begin \n Insert into tb_module (module_id, module_name, module_title, module_note, module_author, module_db, module_db_key, module_type, module_division, module_access_server, module_Form, module_Grid, sql_Group, sql_Select, sql_Where ) values ( \n @ModuleId,  \n @ModuleName,  \n @ModuleTitle,  \n @ModuleNote,1,  \n @ModuleDB,  \n @ModuleDBKey,  \n @ModuleType,  \n @ModuleDivision,  \n @ModuleAccessServer,  \n @ModuleForm,  \n @ModuleGrid,  \n @SqlGroup,  \n @SqlSelect,  \n @SqlWhere)  \n set @OpCode = 1  \n end  \n else \n  begin  \n  update tb_module set module_title=@ModuleTitle, module_note=@ModuleNote, module_author=1, module_db=@ModuleDB, module_db_key=@ModuleDBKey, module_type=@ModuleType, module_division=@ModuleDivision, module_access_server=@ModuleAccessServer, module_Form=@ModuleForm, module_Grid=@ModuleGrid, sql_Group=@SqlGroup, sql_Select=@SqlSelect, sql_Where=@SqlWhere where module_id= @ModuleId \n set @OpCode = 0 \n end \n SET IDENTITY_INSERT tb_module OFF \n end ", "Create Procedure[dbo].[usp_GetModuleDetailsByID]\n ( \n @IsForm bit, \n @ModuleId int ) as \n begin \n if ( \n @IsForm = 1) \n begin \n Select module_title as Title, module_Form as Form , '' as Grid , module_db as TableName from tb_module with(nolock) \n where module_id =  \n @ModuleId \n end \n else \n begin \n Select module_title as Title, '' as Form, module_Grid as Grid, module_db as TableName from tb_module with(nolock) \n where module_id =  \n @ModuleId \n end \n end","CREATE procedure[dbo].[usp_GetValuesforDropDown]  \n( \n @TableName nvarchar(100), \n @Key nvarchar(100), \n @Value nvarchar(100)) \n as \n begin \n Declare  \n @Qry nvarchar(max) \n set  \n @Qry = 'Select ' +  \n @Key + ' as Id ,' +  \n @Value + ' as Value from ' +  \n @TableName + ' with(nolock)'\n  EXECUTE sp_executesql  \n @Qry \n end","Create Procedure[dbo].[usp_UpadteUserWPassword] \n( \n @UserName nvarchar(max), \n @Password nvarchar(max), \n @UserPhoto varbinary(max)) \n as \n begin \n Update tb_users set WPassword = @Password, user_photo=@UserPhoto where email = @UserName \n end"};

    }
}